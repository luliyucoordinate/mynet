// Copyright 2021 coordinate
// Author: coordinate

#ifndef CORE_KERNELS_DUMMY_DATA_OP_HPP_
#define CORE_KERNELS_DUMMY_DATA_OP_HPP_

#include <memory>
#include <vector>

#include "core/framework/filler.hpp"
#include "core/framework/op.hpp"
#include "core/framework/tensor.hpp"

namespace mynet {

/**
 * @brief Provides data to the Net generated by a Filler.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
template <typename Dtype>
class DummyDataOp : public Op<Dtype> {
 public:
  explicit DummyDataOp(OpParameterT* param) : Op<Dtype>(param) {}
  virtual void OpSetUp(const std::vector<Tensor<Dtype>*>& input,
                       const std::vector<Tensor<Dtype>*>& output);
  // Data layers have no inputs, so reshaping is trivial.
  virtual void Reshape(const std::vector<Tensor<Dtype>*>& input,
                       const std::vector<Tensor<Dtype>*>& output) {}

  virtual inline const char* type() const { return "DummyData"; }
  virtual inline uint32_t ExactNumInputTensors() const { return 0ul; }
  virtual inline uint32_t MinOutputTensors() const { return 1ul; }

 protected:
  virtual void ForwardCpu(const std::vector<Tensor<Dtype>*>& input,
                          const std::vector<Tensor<Dtype>*>& output);
  virtual void BackwardCpu(const std::vector<Tensor<Dtype>*>& output,
                           const std::vector<bool>& propagate_down,
                           const std::vector<Tensor<Dtype>*>& input) {}

  std::vector<std::shared_ptr<Filler<Dtype>>> fillers_;
  std::vector<bool> refill_;
};

}  // namespace mynet

#endif  // CORE_KERNELS_DUMMY_DATA_OP_HPP_
